#!/bin/bash -e

trap 'echo "error: $(basename $0): line $LINENO"; exit 1' ERR

# configurations
enablePrivatizer="1"
enableEnablers="1"
enableDead="1"

# partition the arguments between options and not
options=""
notOptions=""
for var in "$@" ; do
  if [[ $var == -* ]] ; then

    # handle custom options
    if [[ $var == "-gino-disable-privatizer" ]] ; then
      enablePrivatizer="0"
      continue
    fi

    if [[ $var == "-gino-disable-enablers" ]] ; then
      enableEnablers="0"
      continue
    fi

    if [[ $var == "-gino-disable-dead" ]] ; then
      enableDead="0"
      continue
    fi

    if [[ $var == -gino-* ]] ; then
      # skip all parallelizer-specific options
      continue
    fi
    # general options
    options="$options $var"
  else 
    notOptions="$notOptions $var"
  fi
done

# strip debugging symbols 
opt --strip-debug --strip-debug-declare $notOptions -o $notOptions

# delete dead functions
if test "$enableDead" == "1" ; then
  noelle-deadcode $notOptions $notOptions
fi

# normalize the code
noelle-simplification $notOptions -o $notOptions

# make file accesses more amenable for parallelization
gino-io $notOptions

# inline functions
gino-inline $notOptions "-gino-inliner-verbose=1 $options"

# normalize the code
noelle-simplification $notOptions -o $notOptions

# delete dead functions
if test "$enableDead" == "1" ; then
  noelle-deadcode $notOptions $notOptions
fi

# normalize the code
noelle-simplification $notOptions -o $notOptions

# run the privatizer
if test "$enablePrivatizer" == "1" ; then
  noelle-privatizer $notOptions $options
fi

# run the enablers
if test "$enableEnablers" == "1" ; then
  gino-enable $notOptions $notOptions $options
fi

# normalize the code
noelle-simplification $notOptions -o $notOptions

# clean up the metadata that is no longer valid
noelle-meta-clean $notOptions -o $notOptions
