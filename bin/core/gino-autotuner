#!/bin/bash -e

trap 'echo "error: $(basename $0): line $LINENO"; exit 1' ERR

installDir=$(gino-config --prefix)

# Parse arguments
for arg in "$@"; do
  case ${arg} in
    --parallelizer-args=*)
      parallelizerArgs="${arg#*=}"
      shift # past argument=value
      ;;
    --libs=*)
      libs="${arg#*=}"
      shift # past argument=value
      ;;
    --input=*)
      inputToRun="${arg#*=}"
      shift # past argument=value
      ;;
    --autotuner-time=*)
      autotunerTime="${arg#*=}"
      shift # past argument=value
      ;;
    --autotuner-numconf=*)
      autotunerNumConf="${arg#*=}"
      shift # past argument=value
      ;;
    --autotuner-seedconf=*)
      autotunerSeedConf="${arg#*=}"
      shift # past argument=value
      ;;
    --nosearchspace)
      generateSearchSpace="0"
      shift # past argument with no value
      ;;
    --noDOALLfiltering)
      filterDOALLSearchSpace="0"
      shift # past argument with no value
      ;;
    --noDOALLtimefiltering)
      filterDOALLtimeSearchSpace="0"
      shift # past argument with no value
      ;;
    -*|--*)
      echo "ERROR: Unknown option ${arg}"
      exit 1
      ;;
    *)
      ;;
  esac
done

# Get additional arguments
if [ "${inputToRun}" == "" ] ; then
  echo "ERROR: --input cannot be empty. Abort."
  exit 1
fi

if [ "${parallelizerArgs}" == "" ] ; then
  echo "ERROR: --parallelizer-args cannot be empty. Abort."
  exit 1
fi
IFS=' ' read -ra parallelizerArgsArray <<< "${parallelizerArgs}"
inputbc="${parallelizerArgsArray[0]}"
outputbc="${parallelizerArgsArray[2]}"

autotunerConf="autotuner_conf.info"
autotunerSpace="autotuner_space.info"

# Needed for the creation and filtering of the autotuner search space
export autotunerSPACE_FILE="${autotunerSpace}"

# Add loop ID to all loops
# NOTE: the outputbc file must be the same as the input because of --parallelizer-args
cmd="noelle-meta-loop-embed ${inputbc} -o ${inputbc}"
echo $cmd
eval $cmd

if [ "${generateSearchSpace}" != "0" ] ; then
  # Generate autotuner_space.info 
  cmd="noelle-load -load ${installDir}/lib/AutotunerSearchSpace.so -AutotunerSearchSpace ${inputbc} -disable-output"
  echo ${cmd}
  eval ${cmd}
fi

# Sanity check for existance of autotuner_space.info file
if ! test -f ${autotunerSpace} ; then
  echo "ERROR: no ${autotunerSpace} found. Abort."
  exit 1
fi

if [ "${filterDOALLSearchSpace}" != "0" ] ; then
  # Adjust search space with DOALL only loops
  cmd="gino-load -load ${installDir}/lib/AutotunerDoallFilter.so -AutotunerDoallFilter ${inputbc} -disable-output"
  echo ${cmd}
  eval ${cmd}
fi

# Export the remaining environment variables for the autotuner
export autotunerPARALLELIZED_BINARY="binaryToRun"
export autotunerEXECUTION_TIME="executionTime.txt"
export autotunerBASELINE_TIME="baselineTime.txt"
export autotunerINSTALL_DIR="${installDir}"
export autotunerARGS="${parallelizerArgs}"
export autotunerINPUT="${inputToRun}"
export autotunerOUTPUTBC="${outputbc}"
export autotunerLIBS="${libs}"
# We need to export this env var to force loop parallelization in GINO
export INDEX_FILE="${autotunerConf}"

# Setup python virtualEnv
source ${installDir}/autotuner/source-me-to-setup-python-virtual-environment

# Compile and run baseline
cmd="python ${installDir}/autotuner/utils/compileAndRunBaseline.py"
echo ${cmd}
eval ${cmd}

if [ "${filterDOALLtimeSearchSpace}" != "0" ] && [ "${filterDOALLSearchSpace}" != "0" ] ; then
  # Filter search space by trying to parallelize DOALL loops one by one
  # if they don't speedup compared to the baseline, then disable them
  # (note: modifies autotuner_space.info)
  cmd="python ${installDir}/autotuner/scripts/filter.py"
  echo ${cmd}
  eval ${cmd}
fi

# Execute autotuner only if space file is not empty.
# This can happen for two reasons:
# 1) the IR of the program has no loops
# 2) the filtering of loops removed all of them
if [ -s ${autotunerSpace} ] ; then
  echo "AUTOTUNER: space file ${autotunerSpace} contains:"
  echo `cat ${autotunerSpace}`

  # Set the command to execute
  cmd="python ${installDir}/autotuner/src/autotuner.py --no-dups --parallelism=1"

  # Get autotuner time limit
  if [ "${autotunerTime}" != "" ] ; then
    cmd="${cmd} --stop-after=${autotunerTime}"
  fi

  # Get autotuner number of configurations to explore limit
  if [ "${autotunerNumConf}" != "" ] ; then
    cmd="${cmd} --test-limit=${autotunerNumConf}"
  fi

  # Get autotuner seed conf
  if [ "${autotunerSeedConf}" != "" ] ; then
    # Safety check: check if seed conf file and space file have at least the same number of lines
    # (we really should check if the number of configuration parameters match, but good enough for now.)
    seedConfNumLines="`wc -l < ${autotunerSeedConf}`"
    spaceNumLines="`wc -l < ${autotunerSpace}`"
    if [ "${seedConfNumLines}" != "${spaceNumLines}" ] ; then
      echo "ERROR: #lines mismatch! autotuner seed conf file ${autotunerSeedConf} has ${seedConfNumLines} lines, while autotuner space file ${autotunerSpace} has ${spaceNumLines}. Abort."
      exit 1
    fi

    autotunerPathToSeedConf="`python ${installDir}/autotuner/utils/genSeedConf.py ${autotunerSeedConf}`"
    cmd="${cmd} --seed-configuration=${autotunerPathToSeedConf}"
  fi

  # Print command we are about to execute
  echo ${cmd}

  # Execute
  eval ${cmd}

else
  echo "AUTOTUNER: space file ${autotunerSpace} is empty. We will not run the autotuner. Bye."
fi

# Deactivate python virtualEnv
deactivate
