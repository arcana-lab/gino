#!/bin/bash -e

installDir=$(gino-config --prefix)

usage() {
  echo "USAGE: `basename $0` INPUT_BC [OPTIONS]..."
  echo
  echo "Tool for parallelizing a specific subset or loops with a plan."
  echo
  echo "INPUT_BC        Input bitcode with parallel plan and API already linked."
  echo "                Generally this file is code_to_parallelize.bc"
  echo
  echo "Options:"
  echo "--help          Display this message."
  echo "--black-list    Comma separated values. Specify which loops will be skipped."
  echo "--white-list    Comma separated values. Specify which loops will be selected."
}

showReturnCode() {
  prefix=$1
  retCode=$2
  if test $retCode -eq 0 ; then
    colorRetCode="\033[1;32m$retCode\033[0m"
  else
    colorRetCode="\033[1;31m$retCode\033[0m"
  fi
  echo -e "${prefix}     returned code $colorRetCode"
}

#------ Beginning --------------------------------------------------------------#

if test $# -lt 2 ; then
  usage
  exit 1
fi

# Parsing arguments
#
inputBC="$1"
whiteList=""
blackList=""
for arg in "$@"; do
  case ${arg} in
    --black-list=*)
      blackList="${arg#*=}"
      shift
      ;;
    --white-list=*)
      whiteList="${arg#*=}"
      shift
      ;;
    --help)
      usage
      exit 0
      ;;
    -*|--*)
      echo "ERROR: Unknown option $arg"
      usage
      exit 1
      ;;
    *)
      ;;
  esac
done

if [[ "$whiteList" != "" ]] && [[ "$blackList" != "" ]]; then
  echo "ERROR: please specify either a while list or a black list. Not both."
  exit 1
fi

prefix="Selector:"
loopsInfo=`gino-plan-info $inputBC 2>&1 | grep "PlanInfo"`
numLoops=$(echo "$loopsInfo" | grep "parallel plan" | egrep -o "[0-9]+")
echo "$loopsInfo"

i_pad=`printf "%0${digitCount}i" $i`
if [[ "$blackList" != "" ]]; then
  list=$blackList
  listName="black"
fi
if [[ "$whiteList" != "" ]]; then
  list=$whiteList
  listName="white"
fi

# Checking that all the specified indexes are valid
#
IFS=',' read -ra loopList <<< "$list"
for num in "${loopList[@]}"; do
  if test $num -ge $numLoops ; then
    echo "${prefix} ERROR: loop with order index $num is out of range [0, $numLoops)"
    exit 2
  fi
done

echo -e "${prefix} \033[1;37m${listName} list of loop indexes: ${list}\033[0m"
echo "${prefix}   running gino-loops"

loops=`echo "$list" | sed "s/,/_/g"`
outputName="parallelized.loop.subset.${listName}.${loops}"

# Creating the parallelized bitcode.
# Only loop numbers in $list will be parallelized.
#
gino-loops $inputBC \
  -o ${outputName}.bc \
  -noelle-loops-${listName}-list="\"$list\"" \
  -noelle-parallelizer-force \
  -alloc-aa-verbose=1 \
  > ${outputName}.log 2>&1

showReturnCode $prefix $?

# Creating the executable
#
echo "${prefix}   running clang++"
clang++ ${outputName}.bc \
  Parallelizer_utils.bc \
  -o ${outputName} \
  -pthreads

showReturnCode $prefix $?

echo "${prefix}   generated binary ${outputName}"


